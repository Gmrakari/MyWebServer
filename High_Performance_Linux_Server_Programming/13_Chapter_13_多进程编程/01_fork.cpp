
/*
 * Date:2021-04-20 21:34
 * file:fork.cpp
 *
 */


#include <sys/types.h>
#include <unistd.h>
pid_t fork(void);

/*
 * 该函数的每次调用都会返回两次，在父进程中返回的是子进程的PID，在子进程中则返回0
 * 该赶回之是后续代码判断当前进程是父进程还是子进程的依据。
 *
 * fork调用失败返回-1,并设置errno
 *
 * 子进程的代码与父进程完全相同，同时它还会复制父进程的数据(堆数据、栈数据和静态数据)
 * 数据的复制采用的是所谓的写时复制(copy on writte),即只有在任一进程(父进程或子进程)
 * 对数据执行了写操作时，复制才会发生(先是缺页中断，然后操作系统给子进程分配内存并复制父进程的数据)
 */

